package com.offact.framework.db;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 */
public class ConnectionSupport
    implements Connection {

    protected Connection con;

    public ConnectionSupport(Connection con) {
        this.con    = con;
    }

    public int getHoldability()
        throws SQLException {
        return this.con.getHoldability();
    }

    public int getTransactionIsolation()
        throws SQLException {
        return this.con.getTransactionIsolation();
    }

    public void clearWarnings()
        throws SQLException {
        this.con.clearWarnings();
    }

    public void close()
        throws SQLException {
        this.con.close();
    }

    public void commit()
        throws SQLException {
        this.con.commit();
    }

    public void rollback()
        throws SQLException {
        this.con.rollback();
    }

    public boolean getAutoCommit()
        throws SQLException {
        return this.con.getAutoCommit();
    }

    public boolean isClosed()
        throws SQLException {
        return this.con.isClosed();
    }

    public boolean isReadOnly()
        throws SQLException {
        return this.con.isReadOnly();
    }

    public void setHoldability(int holdability)
        throws SQLException {
        this.con.setHoldability(holdability);
    }

    public void setTransactionIsolation(int level)
        throws SQLException {
        this.con.setTransactionIsolation(level);
    }

    public void setAutoCommit(boolean autoCommit)
        throws SQLException {
        this.con.setAutoCommit(autoCommit);
    }

    public void setReadOnly(boolean readonly)
        throws SQLException {
        this.con.setReadOnly(readonly);
    }

    public String getCatalog()
        throws SQLException {
        return this.con.getCatalog();
    }

    public void setCatalog(String catalog)
        throws SQLException {
        this.con.setCatalog(catalog);
    }

    public DatabaseMetaData getMetaData()
        throws SQLException {
        return this.con.getMetaData();
    }

    public SQLWarning getWarnings()
        throws SQLException {
        return this.con.getWarnings();
    }

    public Savepoint setSavepoint()
        throws SQLException {
        return this.con.setSavepoint();
    }

    public void releaseSavepoint(Savepoint savepoint)
        throws SQLException {
        this.con.releaseSavepoint(savepoint);
    }

    public void rollback(Savepoint savepoint)
        throws SQLException {
        this.con.rollback(savepoint);
    }

    public Statement createStatement()
        throws SQLException {
        return this.con.createStatement();
    }

    public Statement createStatement(int resultSetType
        , int resultSetConcurrency)
        throws SQLException {
        return this.con.createStatement(resultSetType, resultSetConcurrency);
    }

    public Statement createStatement(int resultSetType
        , int resultSetConcurrency, int resultSetHoldability)
        throws SQLException {

        return this.con.createStatement(resultSetType, resultSetConcurrency
           , resultSetHoldability);
    }

    public String nativeSQL(String query)
        throws SQLException {
        return this.con.nativeSQL(query);
    }

    public CallableStatement prepareCall(String query)
        throws SQLException {
        return this.con.prepareCall(query);
    }

    public CallableStatement prepareCall(String sql, int resultSetType
        , int resultSetConcurrency)
        throws SQLException {
        return this.con.prepareCall(sql, resultSetType, resultSetConcurrency);
    }

    public CallableStatement prepareCall(String sql, int resultSetType
        , int resultSetConcurrency, int resultSetHoldability)
        throws SQLException {
        return this.con.prepareCall(sql, resultSetType, resultSetConcurrency
            , resultSetHoldability);
    }

    public PreparedStatement prepareStatement(String sql)
        throws SQLException {
        return this.con.prepareStatement(sql);
    }

    public PreparedStatement prepareStatement(String sql
        , int autoGeneratedKeys)
        throws SQLException {
        return this.con.prepareStatement(sql, autoGeneratedKeys);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType,
        int resultSetConcurrency)
        throws SQLException {
        return this.con.prepareStatement(sql, resultSetType
            , resultSetConcurrency);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType,
        int resultSetConcurrency, int resultSetHoldability)
        throws SQLException {
        return this.con.prepareStatement(sql, resultSetType
            , resultSetConcurrency, resultSetHoldability);
    }

    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
        throws SQLException {
        return this.con.prepareStatement(sql, columnIndexes);
    }

    public Savepoint setSavepoint(String name)
        throws SQLException {
        return this.con.setSavepoint(name);
    }

    public PreparedStatement prepareStatement(String sql,
        String[] columnNames)
        throws SQLException {
        return this.con.prepareStatement(sql, columnNames);
    }

	public void setTypeMap(Map<String, Class<?>> map)
			throws SQLException {
		this.con.setTypeMap(map);
		
	}

	public Map<String, Class<?>> getTypeMap() throws SQLException {
		return this.con.getTypeMap();
	}

	public <T> T unwrap(Class<T> iface) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public Clob createClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Blob createBlob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public NClob createNClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public SQLXML createSQLXML() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public boolean isValid(int timeout) throws SQLException {
		// TODO Auto-generated method stub
		return false;
	}

	public void setClientInfo(String name, String value)
			throws SQLClientInfoException {
		// TODO Auto-generated method stub
		
	}

	public void setClientInfo(Properties properties)
			throws SQLClientInfoException {
		// TODO Auto-generated method stub
		
	}

	public String getClientInfo(String name) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Properties getClientInfo() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Array createArrayOf(String typeName, Object[] elements)
			throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public Struct createStruct(String typeName, Object[] attributes)
			throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public void abort(Executor arg0) throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public int getNetworkTimeout() throws SQLException {
		// TODO Auto-generated method stub
		return 0;
	}

	public String getSchema() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	public void setNetworkTimeout(Executor executor, int milliseconds)
			throws SQLException {
		// TODO Auto-generated method stub
		
	}

	public void setSchema(String schema) throws SQLException {
		// TODO Auto-generated method stub
		
	}

}
