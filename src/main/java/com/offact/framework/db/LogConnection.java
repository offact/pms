package com.offact.framework.db;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Savepoint;

import org.apache.log4j.Logger;


/**
 */
public class LogConnection
    extends ConnectionSupport {

	final Logger logger = Logger.getLogger(getClass());
    /**
     */
    public LogConnection(Connection con) {
        super(con);
    }

    /**
     */
    public PreparedStatement prepareStatement(String sql)
        throws SQLException {
        return this.getLogPrepatedStatement(sql
            , this.con.prepareStatement(sql));
    }

    /**
     */
    public PreparedStatement prepareStatement(String sql
        , int autoGeneratedKeys)
        throws SQLException {
        return this.getLogPrepatedStatement(sql
            , this.con.prepareStatement(sql, autoGeneratedKeys));
    }

    /**
     */
    public PreparedStatement prepareStatement(String sql, int resultSetType,
        int resultSetConcurrency)
        throws SQLException {
        return this.getLogPrepatedStatement(sql
            , this.con.prepareStatement(sql, resultSetType
            , resultSetConcurrency));
    }

    /**
     */
    public PreparedStatement prepareStatement(String sql, int resultSetType,
        int resultSetConcurrency, int resultSetHoldability)
        throws SQLException {
        return this.getLogPrepatedStatement(sql
            , this.con.prepareStatement(sql, resultSetType
            , resultSetConcurrency, resultSetHoldability));
    }

    /**
     */
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes)
        throws SQLException {
        return this.getLogPrepatedStatement(sql
            , this.con.prepareStatement(sql, columnIndexes));
    }

    /**

     */
    protected PreparedStatement getLogPrepatedStatement(String query
        , PreparedStatement pstmt) {
    	
    	String queryId	= ThreadSession.getSession().getQueryId();
    	if (queryId == null) {
    		queryId	= "[No query ID]";
    	}
    	
    	return new LogPreparedStatement(query, pstmt, queryId);
    }
    
    public void commit()
        throws SQLException {
        if (logger.isDebugEnabled()) {
            this.logger.debug("commit.");
        }    	
        this.con.commit();
    }

    public void rollback()
        throws SQLException {
        if (this.logger.isDebugEnabled()) {
            this.logger.debug("rollback.");
        }    	
        this.con.rollback();
    }
    
    public void setTransactionIsolation(int level)
        throws SQLException {
        this.con.setTransactionIsolation(level);
    }

    public void setAutoCommit(boolean autoCommit)
        throws SQLException {    	
        this.con.setAutoCommit(autoCommit);
    }

    public void setReadOnly(boolean readonly)
        throws SQLException {
        this.con.setReadOnly(readonly);
    }
    
    public Savepoint setSavepoint()
        throws SQLException {
        return this.con.setSavepoint();
    }

    public void releaseSavepoint(Savepoint savepoint)
        throws SQLException {
        this.con.releaseSavepoint(savepoint);
    }

    public void rollback(Savepoint savepoint)
        throws SQLException {
        this.con.rollback(savepoint);
    }
    
    public Savepoint setSavepoint(String name)
        throws SQLException {
    	Savepoint	rv;
    	
    	rv	= this.con.setSavepoint(name);
        return rv;
    }
}
